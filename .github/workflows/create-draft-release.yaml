name: create-draft-release

on:
  workflow_dispatch:
    inputs:
      previous_release_tag:
        description: "Rule: {Worker ID}@{Version}"
        required: true

jobs:
  delivery:
    runs-on: ubuntu-latest
    permissions:
      contents: read
    steps:
      - uses: actions/checkout@v4

      - id: extract
        run: |
          if [[ "${GITHUB_REF_TYPE}" != "branch" ]]; then
            echo "This workflow only runs on a branch."
            exit 1
          fi
          PREFIX="$(echo "${GITHUB_REF_NAME}"  | cut -d'/' -f 1)"
          WORKER="$(echo "${GITHUB_REF_NAME}"  | cut -d'/' -f 2)"
          VERSION="$(echo "${GITHUB_REF_NAME}" | cut -d'/' -f 3)"
          if [[ "${PREFIX}" != "release" ]]; then
            echo "This workflow only runs on the release branch."
            exit 1
          fi
          if [[ ! -d "workers/${WORKER}/" ]]; then
            echo "The worker '${WORKER}' does not exist."
            exit 1
          fi
          echo "worker_id=${WORKER}"                   >> $GITHUB_OUTPUT
          echo "worker_directory=./workers/${WORKER}/" >> $GITHUB_OUTPUT
          echo "branch_version=${VERSION}"             >> $GITHUB_OUTPUT

      - id: check_tag
        run: |
          worker="$(echo "${PREVIOUS_RELEASE_TAG}"  | cut -d'@' -f 1)"
          version="$(echo "${PREVIOUS_RELEASE_TAG}" | cut -d'@' -f 2)"
          if [[ "${worker}" != "${WORKER_ID}" ]]; then
            echo "The worker ID in the tag does not match the worker ID in the branch."
            exit 1
          fi
          if [[ "${version%.*}" != "${BRANCH_VERSION}" ]]; then
            echo "The main and minor version in the tag does not match the version in the branch."
            exit 1
          fi
        env:
          WORKER_ID: ${{ steps.extract.outputs.worker_id }}
          PREVIOUS_RELEASE_TAG: ${{ github.event.inputs.previous_release_tag }}
          BRANCH_VERSION: ${{ steps.extract.outputs.branch_version }}

      - name: Create Release Note
        run: |
          mkdir -p "./temp/"
          JSON_LINES_FILE="./temp/commits.jsonl"
          RELEASE_NOTE_FILE="./temp/release-notes.md"

          git log "${PREVIOUS_REF}..${TARGET_REF}" --oneline --format="%H %s" -- "${WORKER_DIRECTORY}" |
            cut -d' ' -f 1 |
            while read -r COMMIT; do
              echo "Processing commit: ${COMMIT}"
              gh pr list --search "${COMMIT}" --state merged --json 'author,title,url' >> "${JSON_LINES_FILE}"
            done
          jq -r '.[] | ("* " + .title + " by " + .author.login + " in " + .url)' "${JSON_LINES_FILE}" | sort -u > "${RELEASE_NOTE_FILE}"
        env:
          PREVIOUS_REF: ${{ github.event.inputs.previous_release_tag }}
          TARGET_REF: ${{ github.ref_name }}
          WORKER_DIRECTORY: ${{ steps.extract.outputs.worker_directory }}

      - name: Create a Draft Release
        run: |
          gh release create "${TAG_VERSION}" \
            --draft \
            --latest \
            --title "${TAG_VERSION}" \
            --notes-file "./temp/release-notes.md" \
            --target "${TARGET_REF}"
        env:
          TAG_VERSION: ${{ github.event.inputs.previous_release_tag }}
          TARGET_REF: ${{ github_ref_name }}

